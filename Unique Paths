LINK -> https://leetcode.com/problems/unique-paths/description/

#Better Code - MEMOIZATION -> BEST -> O(M + N) & O(M + N)

class Solution {
    public int uniquePaths(int m, int n) {
      int dp[][] = new int[m][n];
      for(int[] rows: dp){
          Arrays.fill(rows,-1);
      }
      return countP(0, 0, m-1, n-1,dp);
    }
    public int countP(int i,int j,int m,int n,int dp[][]){
        if(i > m || j > n)  return 0;
        if(i == m && j == n)  return 1;
        if(dp[i][j] != -1)  return dp[i][j];
        else
        return (dp[i][j] = countP(i + 1, j, m, n, dp) + countP(i, j + 1, m, n, dp));
    }
}

# MOST OPTIMAL -> FORMULA --> m+n-2 C m-1  OR  m+n-2 C n-1 --> TIME - O(M - 1) OR O(N - 1) && SPACE - O(1)

class Solution {
    public int uniquePaths(int m, int n) {
        int N = m + n - 2;
        int R = m - 1;
        double ans = 1;
        for(int i = 1; i <= R; i++){
            ans = ans * (N - R + i) / i;
        }
        return (int)ans;
    }
