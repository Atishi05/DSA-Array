LINK -> https://leetcode.com/problems/longest-consecutive-sequence/description/

# OPTIMAL APPROACH -> O(N)

class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums == null || nums.length == 0) return 0;
        HashSet<Integer> hs = new HashSet<>();
        for(int i:nums){
            hs.add(i);
        }
        int ans = 1;
        
        for(int i:hs){
            if(!hs.contains(i-1)){
                int c = 1;
                int x = i;
                while(hs.contains(x + 1)){
                    x = x + 1;
                    c++;
                }
                ans = Math.max(ans,c);
            }
        }
        return ans;
    }  
}

# BRUTE FORCE -> O(N2)

class Solution {
     public int longestConsecutive(int[] nums) {
        if(nums == null || nums.length == 0) return 0;
        int ans = 1;
        for(int i=0;i<nums.length;i++){
            int x = nums[i];
            int c = 1;
            while(linearSearch(nums,x+1)){
                x++;
                c++;
            }
            ans = Math.max(ans,c);
        }
        return ans;
    }
    public static boolean linearSearch(int a[], int num) {
        int n = a.length; 
        for(int i =0;i<n;i++){
            if(a[i] == num)
                return true;
        }
        return false;
    }
}

# BETTER APPROACH -> O(NlogN)

class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums == null || nums.length == 0) return 0;
        Arrays.sort(nums);
        int last = Integer.MIN_VALUE;
        int cnt_curr = 0 , ans = 1;
        for(int i=0;i<nums.length;i++){
            if(nums[i] - 1 == last){
               cnt_curr++;
               last = nums[i];
            }
            else if(nums[i] != last){
               cnt_curr = 1;
               last = nums[i];
            }
            ans = Math.max(ans,cnt_curr);
        }
        return ans;
    }  
}


