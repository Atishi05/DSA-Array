LINK --> https://leetcode.com/problems/find-all-duplicates-in-an-array/description/

Best Approach->

// when find a number i, flip the number at position i-1 to negative. 
    // if the number at position i-1 is already negative, i is the number that occurs twice.
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> ans = new ArrayList<>();
        for(int i =0;i<nums.length;i++){
            int idx = Math.abs(nums[i]) - 1;
            if(nums[idx] < 0)
              ans.add(Math.abs(idx+1));
            nums[idx] = -nums[idx];  
        }
        return ans;
    }
}

We can also use HashSet or HashMap->

List<Integer> l = new ArrayList<>();
        Set<Integer> s = new HashSet<>();
        for(int i=0;i<nums.length;i++){
            if(s.contains(nums[i]))
              l.add(nums[i]);
            else
              s.add(nums[i]);
        }
        return l;
