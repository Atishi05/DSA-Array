LINK -> https://www.codingninjas.com/studio/problems/count-inversions_615

#BRUTE FORCE - Time - O(n2) & Space - O(1)

CODE ->

public class Solution {
    public static long getInversions(long arr[], int n) {
        // Write your code here.
        long count = 0;
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                if (arr[i] > arr[j]) 
                  count++;
            }
        }
        return count;
    }
}

# OPTIMAL APPROACH - Time - O(nlogn) & Space - O(1)

CODE ->

import java.util.* ;
import java.io.*; 
public class Solution {
    public static long getInversions(long arr[], int n) {
        // Write your code here.
        return mergeSort(arr, 0, n - 1); 
    }
    public static int mergeSort(long[] arr, int low, int high) {
        int cnt = 0;
        if (low >= high) return cnt;
        int mid = (low + high) / 2 ;
        cnt += mergeSort(arr, low, mid);  // left half
        cnt += mergeSort(arr, mid + 1, high); // right half
        cnt += merge(arr, low, mid, high);  // merging sorted halves
        return cnt;
    }
    private static int merge(long[] arr, int low, int mid, int high) {
        ArrayList<Long> temp = new ArrayList<>(); // temporary array
        int left = low;      // starting index of left half of arr
        int right = mid + 1;   // starting index of right half of arr

        int cnt = 0;

        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp.add(arr[left]);
                left++;
            } else {
                temp.add(arr[right]);
                cnt += (mid - left + 1);
                right++;
            }
        }

        while (left <= mid) {
            temp.add(arr[left]);
            left++;
        }
        while (right <= high) {
            temp.add(arr[right]);
            right++;
        }
        for (int i = low; i <= high; i++) {
            arr[i] = temp.get(i - low);
        }
        return cnt;
    }

}

