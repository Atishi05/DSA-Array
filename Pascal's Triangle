TYPE 1 -> Row and Column is given then tell the answer for that row and col. Ex. - row = 5 , col = 3 => ans = 6

We can calculate it by NcR and but we can be more specific as suppose - 10C3 --> 10*9*8/ 1*2*3 therefore Time complexity will be - O(r) & Space - O(1)

int ncr(int n,int r){
long ans = 1;
for(int i=0;i<r;i++){
  ans *= (n-i);
  ans /= (i+1);
}
return ans;

TYPE 2 -> Print any Nth row of Pascal's Triangle

We can do by calling above fnc every time but it will be O(n*r) time complexity

int solve(int n){
 for(int i=1;i<n;i++){
   print(ncr(n-1,i-1));
 }
}

But we can do it in a better approach -> Time  - O(n) & Space - O(1)

int solve(int n){
long ans = 1;
print ans;
for(int i=1;i<n;i++){
   ans *= (n-i);
   ans /= (i+1);
}
print ans;
}

TYPE 3 -> For given n print the pascal's triangle in the List<List<Integer>> ans

LINK -> https://leetcode.com/problems/pascals-triangle/description/
time complexity -> O(n2)
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        for(int i=1;i<=numRows;i++){
          res.add(generateRow(i));
        }
        return res;
    }
    public List<Integer> generateRow(int r){
        int ans = 1;
        List<Integer> row = new ArrayList<>();
        row.add(1);
        for(int j=1;j<r;j++){
            ans *= (r-j);
            ans /= j;
            row.add(ans);
        }
        return row;
    }
}
