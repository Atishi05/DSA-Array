LINK -> https://leetcode.com/problems/single-element-in-a-sorted-array/description/

CODE - O(log n) & O(1)

int n = nums.length;
        if(n == 1) return nums[0];
        if(nums[0] != nums[1]) return nums[0];
        if(nums[n-1] != nums[n-2]) return nums[n-1];
        
        int low = 0, high = n-2;

        while(low <= high){
            int mid = (low + high)/2;
            if(nums[mid] != nums[mid-1] && nums[mid] != nums[mid+1])
              return nums[mid];

            if((mid % 2 == 1 && nums[mid] == nums[mid-1]) || (mid % 2 == 0 && nums[mid] == nums[mid+1]))
            low = mid + 1;
            else
            high = mid - 1;  
        }
       return -1;
    }
}

OR

CODE ->

lass Solution {
    public int singleNonDuplicate(int[] nums) {
      int l = 0, h = nums.length - 2;
        while(l <= h){
            int m = (l+h) >> 1;
            if(nums[m] == nums[m^1]) //if index is odd-->it will check for .
                l = m + 1;   //backward that is even and if index is odd then 
            else            //it will go for odd index...
                h = m - 1;
        }
        return nums[l];
    }
}

# BIT MANIPUALTION

CODE - >

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int res=0;
        for(int i:nums){
            res=res^i;
        }
        return res;
    }
}
